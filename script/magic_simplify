#!/bin/bash

# source: https://github.com/ekimb/rust-mdbg/blob/f155058b6db7a375fb11940715f3d25bb15fcd73/utils/magic_simplify

# MIT License
# 
# Copyright (c) 2021 BarÄ±ÅŸ Ekim & Rayan Chikhi & Bonnie Berger
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# this script simplifies a gfa graph using gfatools (tip, bubbles)

# boilerplate code for finding folder where this script really resides
# from https://stackoverflow.com/questions/59895/get-the-source-directory-of-a-bash-script-from-within-the-script-itself
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # for relative symlink
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

base="$1"

set -x

if ! command -v gfatools &> /dev/null
then
echo "please install gfatools"
    exit
fi


gfatools asm $base.gfa -t 10,50000 -t 10,50000 -b 100000 -b 100000 -t 10,50000 -b 100000 -b 100000 -b 100000 -t 10,50000 -b 100000 -t 10,50000 -b 1000000 -t 10,150000 -b 1000000 -u > $base.tmp1.gfa
python $DIR/gfa_break_loops.py $base.tmp1.gfa > $base.tmp2.gfa

# https://stackoverflow.com/a/15522969
filesize=$(ls -Lon "$base.tmp2.gfa" | awk '{ print $4 }')

current_graph=$base.tmp2.gfa

if (( filesize > 1000000)); then
    /usr/bin/time gfatools asm $current_graph  -t 10,50000 -b 100000 -t 10,100000  -b 1000000 -t 10,150000 -b 1000000 -u > $base.tmp3.gfa
    current_graph=$base.tmp3.gfa
fi

# for large genomes: more aggressive tip clipping
if (( filesize > 100000000)); then
    python $DIR/gfa_break_loops.py $current_graph > $base.tmp4.gfa
    current_graph=$base.tmp4.gfa
    /usr/bin/time gfatools asm $current_graph  -t 10,50000 -b 100000 -t 10,100000  -b 1000000 -t 10,200000 -b 1000000 -u > $base.msimpl.gfa
else
    mv $current_graph$base.msimpl.gfa
fi

if [[ $@ != *'--keep'* ]]
then
    rm -rf $base.tmp*.gfa
fi


gfatools gfa2fa $base.msimpl.gfa > $base.msimpl.fa
